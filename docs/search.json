[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cartographie avec R",
    "section": "",
    "text": "Créer des cartes thématiques conformes aux règles de la sémiologie graphique et de la cartographie avec R.\nL’objectif de ce document est de fournir un support à l’apprentissage de la cartographie avec R.\nComment utiliser le manuel\nLe projet RStudio contenant l’ensemble des données utilisées dans le manuel est disponible ici. Une fois le dossier décompressé il est possible de tester l’ensemble des manipulations proposées dans ce manuel dans le projet RStudio geodata.\nContribution et feedback\nVous pouvez nous envoyer vos remarques et suggestions en postant une issue sur le dépôt GitHub de ce document.\n\n\n\n\n\n\nCe document est dérivé de deux supports de cours plus complets : Géomatique avec R et Cartographie avec R."
  },
  {
    "objectID": "historique.html",
    "href": "historique.html",
    "title": "1  Historique et évolutions",
    "section": "",
    "text": "Historiquement, 4 packages permettent d’importer, de manipuler et de transformer les données spatiales :\nAujourd’hui, les principaux développements concernants les données vectorielles se sont détachés des 3 anciens (sp, rgdal, rgeos) pour se reposer principalement sur le package sf (Pebesma, 2018a ; Pebesma, 2018b). Dans ce manuel nous nous appuierons exclusivement sur ce package pour manipuler les données vectorielles.\nLes packages stars (Pebesma, 2021) et terra(Hijmans, 2021b) sont venus quand à eux remplacer le package raster pour le traitement des données raster. Nous avons choisi d’utiliser ici le package terra pour sa proximité avec le package raster."
  },
  {
    "objectID": "historique.html#le-package-sf",
    "href": "historique.html#le-package-sf",
    "title": "1  Historique et évolutions",
    "section": "1.1 Le package sf",
    "text": "1.1 Le package sf\n Le package sf a été publié fin 2016 par Edzer Pebesma (également auteur de sp). Son objectif est de combiner les fonctionnalités de sp, rgeos et rgdal dans un package unique plus ergonomique. Ce package propose des objets plus simples (suivant le standard simple feature) dont la manipulation est plus aisée. Une attention particulière a été portée à la compatibilité du package avec la syntaxe pipe et les opérateurs du tidyverse.\nsf utilise directement les librairies GDAL, GEOS et PROJ.\n\n\n\nFrom r-spatial.org\n\n\n\n\n\n\n\n\nSite web du package sf\n\n\n\nSimple Features for R"
  },
  {
    "objectID": "historique.html#le-package-terra",
    "href": "historique.html#le-package-terra",
    "title": "1  Historique et évolutions",
    "section": "1.2 Le package terra",
    "text": "1.2 Le package terra\n Le package terra a été publié début 2020 par Robert J. Hijmans (également auteur de raster). Son objectif est de proposer des méthodes de traitement et d’analyse de données rasrer. Ce package est très similaire au package raster; mais il propose plus de fonctionnalités, il est plus facile à utiliser et il est plus rapide.\n\n\n\n\n\n\nSite web du package terra :\n\n\n\nSpatial Data Science with R and “terra”\n\n\n\n\n\n\nBivand, R. S. (2020). Progress in the R ecosystem for representing and handling spatial data. Journal of Geographical Systems, 1‑32.\n\n\nBivand, R., Keitt, T. et Rowlingson, B. (2018). rgdal: Bindings for the ’Geospatial’ Data Abstraction Library. https://CRAN.R-project.org/package=rgdal\n\n\nBivand, R. et Rundel, C. (2018). rgeos: Interface to Geometry Engine - Open Source (’GEOS’). https://CRAN.R-project.org/package=rgeos\n\n\nGDAL/OGR contributors. (2022). GDAL/OGR Geospatial Data Abstraction software Library. Open Source Geospatial Foundation. https://doi.org/10.5281/zenodo.5884351\n\n\nHijmans, R. J. (2021a). raster: Geographic Data Analysis and Modeling. https://CRAN.R-project.org/package=raster\n\n\nHijmans, R. J. (2021b). terra: Spatial Data Analysis. https://CRAN.R-project.org/package=terra\n\n\nLovelace, R., Nowosad, J. et Muenchow, J. (2019). Geocomputation with R. CRC Press. https://geocompr.robinlovelace.net/\n\n\nPebesma, E. (2018a). sf: Simple Features for R. https://CRAN.R-project.org/package=sf\n\n\nPebesma, E. (2018b). Simple Features for R: Standardized Support for Spatial Vector Data. The R Journal. https://journal.r-project.org/archive/2018/RJ-2018-009/index.html\n\n\nPebesma, E. (2021). stars: Spatiotemporal Arrays, Raster and Vector Data Cubes. https://CRAN.R-project.org/package=stars\n\n\nPebesma, E. et Bivand, R. (2018). sp: Classes and Methods for Spatial Data. https://CRAN.R-project.org/package=sp\n\n\nPROJ contributors. (2021). PROJ coordinate transformation software library. Open Source Geospatial Foundation. https://proj.org/"
  },
  {
    "objectID": "01_ecosysteme_spatial.html",
    "href": "01_ecosysteme_spatial.html",
    "title": "2  Les données spatiales",
    "section": "",
    "text": "Les données vectorielles sont souvent associées à des données attributaires."
  },
  {
    "objectID": "02_donnees_vectorielles.html",
    "href": "02_donnees_vectorielles.html",
    "title": "3  Manipuler les données vectorielles",
    "section": "",
    "text": "Les objets sf sont des data.frame dont l’une des colonnes contient des géométries. Cette colonne est de la classe sfc (simple feature column) et chaque individu de la colonne est un sfg (simple feature geometry).\nCe format est très pratique dans la mesure ou les données et les géométries sont intrinsèquement liées dans un même objet.\n\n\n\n\n\n\nVignette décrivant le format simple feature\n\n\n\nSimple Features for R"
  },
  {
    "objectID": "02_donnees_vectorielles.html#import-et-export-de-données",
    "href": "02_donnees_vectorielles.html#import-et-export-de-données",
    "title": "3  Manipuler les données vectorielles",
    "section": "3.2 Import et export de données",
    "text": "3.2 Import et export de données\nLes fonctions st_read() et st_write() permettent d’importer et d’exporter de nombreux types de fichiers.\nLes lignes suivantes importent la couche des communes du département du Lot situé dans le fichier geopackage lot46.gpkg.\n\nlibrary(sf)\n\n#> Linking to GEOS 3.9.0, GDAL 3.2.2, PROJ 7.2.1; sf_use_s2() is TRUE\n\ncom <- st_read(\"data/lot46.gpkg\", layer = \"commune\")\n\n#> Reading layer `commune' from data source \n#>   `/home/tim/Documents/prz/ined2022/data/lot46.gpkg' using driver `GPKG'\n#> Simple feature collection with 313 features and 12 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 539668.5 ymin: 6346290 xmax: 637380.9 ymax: 6439668\n#> Projected CRS: RGF93 / Lambert-93\n\n\nLes lignes suivantes exportent l’objet com dans un dossier data aux formats geopackage et shapefile.\n\nst_write(obj = com, dsn = \"data/com.gpkg\", layer = \"commune\", delete_layer = TRUE)\n\n#> Deleting layer `commune' using driver `GPKG'\n#> Writing layer `commune' to data source `data/com.gpkg' using driver `GPKG'\n#> Writing 313 features with 12 fields and geometry type Multi Polygon.\n\nst_write(obj = com, \"data/com.shp\", layer_options = \"ENCODING=UTF-8\", delete_layer = TRUE)\n\n#> Deleting layer `com' using driver `ESRI Shapefile'\n#> Writing layer `com' to data source `data/com.shp' using driver `ESRI Shapefile'\n#> options:        ENCODING=UTF-8 \n#> Writing 313 features with 12 fields and geometry type Multi Polygon."
  },
  {
    "objectID": "02_donnees_vectorielles.html#affichage",
    "href": "02_donnees_vectorielles.html#affichage",
    "title": "3  Manipuler les données vectorielles",
    "section": "3.3 Affichage",
    "text": "3.3 Affichage\nAperçu des variables via les fonctions head() et plot().\n\nhead(com)\n\n#> Simple feature collection with 6 features and 12 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 556391.9 ymin: 6371852 xmax: 614866.5 ymax: 6418606\n#> Projected CRS: RGF93 / Lambert-93\n#>   INSEE_COM         NOM_COM         STATUT POPULATION     AGR_H    AGR_F\n#> 1     46001           Albas Commune simple        522  4.978581 0.000000\n#> 2     46002          Albiac Commune simple         67  0.000000 9.589041\n#> 3     46003        Alvignac Commune simple        706 10.419682 0.000000\n#> 4     46004         Anglars Commune simple        219  0.000000 0.000000\n#> 5     46005 Anglars-Juillac Commune simple        329  4.894895 4.894895\n#> 6     46006   Anglars-Nozac Commune simple        377  4.840849 0.000000\n#>       IND_H     IND_F     BTP_H    BTP_F     TER_H     TER_F\n#> 1  4.936153  0.000000  9.957527 0.000000 44.917145 34.681799\n#> 2  0.000000  0.000000  4.794521 0.000000  4.794521  9.589041\n#> 3 10.419682  5.209841 10.419682 0.000000 57.308249 78.147612\n#> 4 20.000000 15.000000 10.000000 0.000000 20.000000 20.000000\n#> 5  4.894895  0.000000  0.000000 0.000000 29.369369 29.369369\n#> 6  0.000000  0.000000  9.681698 4.840849 43.567639 38.726790\n#>                             geom\n#> 1 MULTIPOLYGON (((559262 6371...\n#> 2 MULTIPOLYGON (((605540.7 64...\n#> 3 MULTIPOLYGON (((593707.7 64...\n#> 4 MULTIPOLYGON (((613211.3 64...\n#> 5 MULTIPOLYGON (((556744.9 63...\n#> 6 MULTIPOLYGON (((576667.2 64...\n\nplot(com)\n\n#> Warning: plotting the first 9 out of 12 attributes; use max.plot = 12 to plot\n#> all\n\n\n\n\n\nAffichage de la géométrie uniquement.\n\nplot(st_geometry(com))"
  },
  {
    "objectID": "02_donnees_vectorielles.html#les-systèmes-de-coordonnées",
    "href": "02_donnees_vectorielles.html#les-systèmes-de-coordonnées",
    "title": "3  Manipuler les données vectorielles",
    "section": "3.4 Les systèmes de coordonnées",
    "text": "3.4 Les systèmes de coordonnées\n\n3.4.1 Consulter le système de coordonnées d’un objet\nLa fonction st_crs() permet de consulter le système de coordonnées utilisé par un objet sf.\n\nst_crs(com)\n\n#> Coordinate Reference System:\n#>   User input: RGF93 / Lambert-93 \n#>   wkt:\n#> PROJCRS[\"RGF93 / Lambert-93\",\n#>     BASEGEOGCRS[\"RGF93\",\n#>         DATUM[\"Reseau Geodesique Francais 1993\",\n#>             ELLIPSOID[\"GRS 1980\",6378137,298.257222101,\n#>                 LENGTHUNIT[\"metre\",1]]],\n#>         PRIMEM[\"Greenwich\",0,\n#>             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#>         ID[\"EPSG\",4171]],\n#>     CONVERSION[\"Lambert-93\",\n#>         METHOD[\"Lambert Conic Conformal (2SP)\",\n#>             ID[\"EPSG\",9802]],\n#>         PARAMETER[\"Latitude of false origin\",46.5,\n#>             ANGLEUNIT[\"degree\",0.0174532925199433],\n#>             ID[\"EPSG\",8821]],\n#>         PARAMETER[\"Longitude of false origin\",3,\n#>             ANGLEUNIT[\"degree\",0.0174532925199433],\n#>             ID[\"EPSG\",8822]],\n#>         PARAMETER[\"Latitude of 1st standard parallel\",49,\n#>             ANGLEUNIT[\"degree\",0.0174532925199433],\n#>             ID[\"EPSG\",8823]],\n#>         PARAMETER[\"Latitude of 2nd standard parallel\",44,\n#>             ANGLEUNIT[\"degree\",0.0174532925199433],\n#>             ID[\"EPSG\",8824]],\n#>         PARAMETER[\"Easting at false origin\",700000,\n#>             LENGTHUNIT[\"metre\",1],\n#>             ID[\"EPSG\",8826]],\n#>         PARAMETER[\"Northing at false origin\",6600000,\n#>             LENGTHUNIT[\"metre\",1],\n#>             ID[\"EPSG\",8827]]],\n#>     CS[Cartesian,2],\n#>         AXIS[\"easting (X)\",east,\n#>             ORDER[1],\n#>             LENGTHUNIT[\"metre\",1]],\n#>         AXIS[\"northing (Y)\",north,\n#>             ORDER[2],\n#>             LENGTHUNIT[\"metre\",1]],\n#>     USAGE[\n#>         SCOPE[\"Engineering survey, topographic mapping.\"],\n#>         AREA[\"France - onshore and offshore, mainland and Corsica.\"],\n#>         BBOX[41.15,-9.86,51.56,10.38]],\n#>     ID[\"EPSG\",2154]]\n\n\n\n\n3.4.2 Modifier le système de coordonnées d’un objet\nLa fonction st_transform() permet de change le système de coordonnées d’un objet sf, de le reprojeter.\n\nplot(st_geometry(com))\ntitle(\"EPSG: 2154\")\n\n\n\ncom_reproj <- st_transform(com, \"epsg:3035\")\nplot(st_geometry(com_reproj))\ntitle(\"EPSG: 3035\")\n\n\n\n\nLe site Spatial Reference met à disposition les références de très nombreux systèmes de coordonnées."
  },
  {
    "objectID": "02_donnees_vectorielles.html#sélection-par-attributs",
    "href": "02_donnees_vectorielles.html#sélection-par-attributs",
    "title": "3  Manipuler les données vectorielles",
    "section": "3.5 Sélection par attributs",
    "text": "3.5 Sélection par attributs\nLes objets sf sont des data.frame, on peut donc sélectionner leur lignes et leur colonnes de la même manière que les data.frame.\n\n# selection de ligne\ncom[1:2, ]\n\n#> Simple feature collection with 2 features and 12 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 557759.2 ymin: 6371852 xmax: 607179 ymax: 6410204\n#> Projected CRS: RGF93 / Lambert-93\n#>   INSEE_COM NOM_COM         STATUT POPULATION    AGR_H    AGR_F    IND_H IND_F\n#> 1     46001   Albas Commune simple        522 4.978581 0.000000 4.936153     0\n#> 2     46002  Albiac Commune simple         67 0.000000 9.589041 0.000000     0\n#>      BTP_H BTP_F     TER_H     TER_F                           geom\n#> 1 9.957527     0 44.917145 34.681799 MULTIPOLYGON (((559262 6371...\n#> 2 4.794521     0  4.794521  9.589041 MULTIPOLYGON (((605540.7 64...\n\ncom[com$NOM_COM == \"Gramat\", ]\n\n#> Simple feature collection with 1 feature and 12 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 593605.6 ymin: 6402330 xmax: 602624.6 ymax: 6413784\n#> Projected CRS: RGF93 / Lambert-93\n#>     INSEE_COM NOM_COM         STATUT POPULATION    AGR_H    AGR_F    IND_H\n#> 119     46128  Gramat Commune simple       3468 10.19868 15.29802 122.3842\n#>        IND_F    BTP_H BTP_F    TER_H    TER_F                           geom\n#> 119 107.0862 56.09275     0 260.0664 304.1941 MULTIPOLYGON (((594713.1 64...\n\n# selection de colonnes\ncom[com$NOM_COM == \"Gramat\", 1:4]\n\n#> Simple feature collection with 1 feature and 4 fields\n#> Geometry type: MULTIPOLYGON\n#> Dimension:     XY\n#> Bounding box:  xmin: 593605.6 ymin: 6402330 xmax: 602624.6 ymax: 6413784\n#> Projected CRS: RGF93 / Lambert-93\n#>     INSEE_COM NOM_COM         STATUT POPULATION                           geom\n#> 119     46128  Gramat Commune simple       3468 MULTIPOLYGON (((594713.1 64..."
  },
  {
    "objectID": "02_donnees_vectorielles.html#sélection-spatiale",
    "href": "02_donnees_vectorielles.html#sélection-spatiale",
    "title": "3  Manipuler les données vectorielles",
    "section": "3.6 Sélection spatiale",
    "text": "3.6 Sélection spatiale\n\n3.6.1 Intersections\nSélection des routes intesectant la commune de Gramat.\n\nroute <- st_read(\"data/lot46.gpkg\", layer = \"route\", quiet = TRUE)\ngramat <-  com[com$NOM_COM == \"Gramat\", ]\ninter <- st_intersects(x = route, y = gramat, sparse = FALSE)\nhead(inter)\n\n#>       [,1]\n#> [1,] FALSE\n#> [2,] FALSE\n#> [3,] FALSE\n#> [4,] FALSE\n#> [5,] FALSE\n#> [6,] FALSE\n\ndim(inter)\n\n#> [1] 16096     1\n\n\nL’objet inter est une matrice qui indique pour chacun des éléments de l’objet route (16096 éléments) si il\nintersecte chacun des élément de l’objet gramat (1 élément). La dimension de la matrice est donc bien 16096 lignes * 1 colonne.\nNotez l’utilisation du paramètre sparse = FALSE ici. Il est ensuite possible de créer une colonne à partir de cet objet :\n\nroute$intersect_gramat <- inter\nplot(st_geometry(gramat), col = \"lightblue\")\nplot(st_geometry(route), add = TRUE)\nplot(st_geometry(route[route$intersect_gramat, ]), \n     col = \"tomato\", lwd = 2, add = TRUE)\n\n\n\n\n\n\n3.6.2 Contains / Within\nSélection des routes contenues dans la commune de Gramat. La fonctin st_within() fonctionne comme la fonction st_intersects()\n\nroute$within_gramat <- st_within(route, gramat, sparse = FALSE)\nplot(st_geometry(gramat), col = \"lightblue\")\nplot(st_geometry(route), add = TRUE)\nplot(st_geometry(route[route$within_gramat, ]), col = \"tomato\", \n     lwd = 2, add = TRUE)"
  },
  {
    "objectID": "02_donnees_vectorielles.html#opérations-sur-les-géométries",
    "href": "02_donnees_vectorielles.html#opérations-sur-les-géométries",
    "title": "3  Manipuler les données vectorielles",
    "section": "3.7 Opérations sur les géométries",
    "text": "3.7 Opérations sur les géométries\n\n3.7.1 Extraire des centroides\n\ncom_c <- st_centroid(com)\n\n#> Warning in st_centroid.sf(com): st_centroid assumes attributes are constant over\n#> geometries of x\n\nplot(st_geometry(com))\nplot(st_geometry(com_c), add = TRUE, col = \"red\", cex = .5, pch = 20)\n\n\n\n\n\n\n3.7.2 Agréger des polygones\n\ndep_46 <- st_union(com)\nplot(st_geometry(com), col = \"lightblue\")\nplot(st_geometry(dep_46), add = TRUE, lwd = 1.2, border = \"red\")\n\n\n\n\n\n\n3.7.3 Agréger des polygones en fonction d’une variable\n\ncom_u <- aggregate(x = com[,c(\"POPULATION\")],\n                   by = list(STATUT = com$STATUT),\n                   FUN = \"sum\")\nplot(com_u)\n\n\n\n\n\n\n3.7.4 Construire une zone tampon\n\ngramat_b <- st_buffer(x = gramat, dist = 5000)\nplot(st_geometry(gramat_b), col = \"lightblue\", lwd=2, border = \"red\")\nplot(st_geometry(gramat), add = TRUE, lwd = 2)\n\n\n\n\n\n\n3.7.5 Réaliser une intersection\nEn utilisant la fonction st_intersection() on va découper une couche par une autre.\n\n# création d'une zone tampon autour du centroid de la commune de Gramat\n# en utilisant le pipe\nzone <- st_geometry(gramat) |>\n  st_centroid() |>\n  st_buffer(10000)\nplot(st_geometry(com))\nplot(zone, border = \"red\", lwd = 2, add = TRUE)\n\n\n\ncom_z <- st_intersection(x = com, y = zone)\n\n#> Warning: attribute variables are assumed to be spatially constant throughout all\n#> geometries\n\nplot(st_geometry(com))\nplot(st_geometry(com_z), col=\"red\", border=\"green\", add=T)\n\n\n\nplot(st_geometry(com_z))"
  },
  {
    "objectID": "02_donnees_vectorielles.html#mesures",
    "href": "02_donnees_vectorielles.html#mesures",
    "title": "3  Manipuler les données vectorielles",
    "section": "3.8 Mesures",
    "text": "3.8 Mesures\n\n3.8.1 Créer une matrice de distances\nSi le système de projection du jeu de données est renseigné les distances sont exprimées dans l’unité de mesure de la projection (en mètres le plus souvent).\n\nmat <- st_distance(x = com_c, y = com_c)\nmat[1:5,1:5]\n\n#> Units: [m]\n#>           [,1]     [,2]     [,3]     [,4]      [,5]\n#> [1,]     0.000 56784.77 54353.94 61166.42  3790.688\n#> [2,] 56784.770     0.00 12454.29  7146.11 57288.103\n#> [3,] 54353.942 12454.29     0.00 19388.52 54030.811\n#> [4,] 61166.418  7146.11 19388.52     0.00 62016.141\n#> [5,]  3790.688 57288.10 54030.81 62016.14     0.000"
  },
  {
    "objectID": "02_donnees_vectorielles.html#exercices",
    "href": "02_donnees_vectorielles.html#exercices",
    "title": "3  Manipuler les données vectorielles",
    "section": "3.9 Exercices",
    "text": "3.9 Exercices\n\n3.9.1 Calculer le nombre de restaurants par communes\n\nQuelles communes ont plus de 10 restaurants et moins de 1000 habitants ?\nCréez une carte où vous afficherez toutes les communes en gris et les communes sélectionnées plus haut en rouge."
  },
  {
    "objectID": "mapsf.html",
    "href": "mapsf.html",
    "title": "4  mapsf",
    "section": "",
    "text": "L’écosystème spatial du logiciel libre R est riche, dynamique et mature et plusieurs packages permettent d’importer, de traiter et de représenter les données spatiales. Le package mapsf (Giraud, 2021) s’appuie sur cet écosystème pour intégrer la création de cartes thématiques de qualité dans les chaînes de traitement avec R.\nD’autres packages peuvent être utilisés pour réaliser des cartes thématiques. Le package ggplot2 (Wickham, 2016), en association avec le package ggspatial (Dunnington, 2021), permet par exemple d’afficher des objets spatiaux et de réaliser des cartes thématiques simples. Le package tmap (Tennekes, 2018) est dédié à la création de cartes thématiques, il utilise une syntaxe proche de celle de ggplot2 (enchaînement d’instructions combinées avec le signe ‘+’). La documentation et les tutoriels pour utiliser ces deux packages sont facilement accessibles sur le web.\nIci, nous utiliserons principalement le package mapsf dont les fonctionnalités sont assez complètes et la prise en main plutôt simple. De plus, le package est relativement léger.\nmapsf permet de créer la plupart des types de carte utilisés habituellement en cartographie statistique (cartes choroplèthes, typologies, symboles proportionnels ou gradués…).\nPour chaque type de carte, plusieurs paramètres permettent de personnaliser la représentation cartographique. Ces paramètres sont les mêmes que ceux que l’on retrouve dans les logiciels de SIG ou de cartographie usuels (par exemple, le choix des discrétisations et des palettes de couleurs, la modification de de la taille des symboles ou la personnalisation des légendes).\nAssociées aux fonctions de représentation des données d’autres fonctions sont dédiées à l’habillage cartographique (thèmes ou chartes graphiques, légendes, échelles, flèches d’orientation, titre, crédits, annotations…), à la création de cartons ou à l’export des cartes.\nmapsf est le successeur de cartography (Giraud et Lambert, 2018), il offre les mêmes fonctionnalités principales tout en étant plus léger et plus ergonomique.\n\n\n\n\n\n\nPour utiliser ce package plusieurs sources de documentation peuvent être consultées.\n\n\n\n\nLa documentation du package accessible sur internet ou directement dans R (?mapsf).\nUne cheat sheet. \nLes vignettes associées au package présentent des exemples de scripts.\nLe blog R Géomatique qui met à disposition ressources et exemples liés au package et plus généralement à l’écosystème spatial de R.\n\n\n\n\n\n\n\nDunnington, D. (2021). ggspatial: Spatial Data Framework for ggplot2. https://CRAN.R-project.org/package=ggspatial\n\n\nGiraud, T. (2021). mapsf: Thematic Cartography.\n\n\nGiraud, T. et Lambert, N. (2018). cartography: Thematic Cartography. https://github.com/riatelab/cartography/\n\n\nTennekes, M. (2018). tmap: Thematic Maps in R. Journal of Statistical Software, 84(6), 1‑39. https://doi.org/10.18637/jss.v084.i06\n\n\nWickham, H. (2016). ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org"
  },
  {
    "objectID": "semio.html",
    "href": "semio.html",
    "title": "5  La sémiologie graphique",
    "section": "",
    "text": "La sémiologie graphique utilise les propriétés de l’image visuelle pour faire apparaitre les relations de différence, d’ordre et de proportionnalité entre les données.\nD’après Bertin (1967)\n\nPour une première approche de la cartographie thématique on peut se référer à la figure suivante qui résume de manière simplifiée la relation entre un type de variable et sa représentation graphique correcte.\n\n\n\n\n\n\n\nPourquoi on ne représente pas de stocks en aplat !\n\n\n\n\n\n\n\n\n\nQuelques ouvrages de référence en cartographie thématique : Bertin (1967), Pumain et Béguin (2010), Lambert et Zanin (2016).\n\n\n\n\n\n\n\nBertin, J. (1967). Sémiologie Graphique: Les Diagrammes, Les Réseaux, Les Cartes, Les Réimpressions Des Éditions De l’Ecole Des Hautes Études en Sciences Sociales. Paris: Mouton & Gauthier-Villars.\n\n\nLambert, N. et Zanin, C. (2016). Manuel de cartographie: principes, méthodes, applications. Armand Colin.\n\n\nPumain, D. et Béguin, M. (2010). La représentation des données géographiques: Statistique et cartographie. Armand Colin."
  },
  {
    "objectID": "type_de_carte.html",
    "href": "type_de_carte.html",
    "title": "6  Les types de cartes",
    "section": "",
    "text": "La fonction mf_map() est la fonction centrale du package mapsf. Elle permet de réaliser la plupart des représentations usuelles en cartographie. Ces arguments principaux sont :"
  },
  {
    "objectID": "type_de_carte.html#les-données-dexemple",
    "href": "type_de_carte.html#les-données-dexemple",
    "title": "6  Les types de cartes",
    "section": "6.1 Les données d’exemple",
    "text": "6.1 Les données d’exemple\nLes lignes suivantes importent les couches d’information spatiales situées dans le fichier geopackage lot46.gpkg.\n\nlibrary(sf)\n\n#> Linking to GEOS 3.9.0, GDAL 3.2.2, PROJ 7.2.1; sf_use_s2() is TRUE\n\n# import des communes du Lot\ncom <- st_read(\"data/lot46.gpkg\", layer = \"commune\", quiet = TRUE)\n# import des départments français\ndep <- st_read(\"data/lot46.gpkg\", layer = \"departement\", quiet = TRUE)\n# import des restaurants\nresto <- st_read(\"data/lot46.gpkg\", layer = \"restaurant\", quiet = TRUE)\n# import des routes\nroute <- st_read(\"data/lot46.gpkg\", layer = \"route\", quiet = TRUE)"
  },
  {
    "objectID": "type_de_carte.html#afficher-un-fond-de-carte",
    "href": "type_de_carte.html#afficher-un-fond-de-carte",
    "title": "6  Les types de cartes",
    "section": "6.2 Afficher un fond de carte",
    "text": "6.2 Afficher un fond de carte\nUtilisée sans précision de type, la fonction mf_map() affiche simplement le fond de carte.\n\nlibrary(mapsf)\n# Communes\nmf_map(x = com, border = \"white\")\nmf_map(x = dep, lwd = 2, col = NA, add = TRUE)\nmf_map(x = route, lwd = .5, col = \"ivory4\", add = TRUE)\nmf_map(x = resto, pch = 20, cex = .7, col = \"darkred\", add = TRUE)"
  },
  {
    "objectID": "type_de_carte.html#carte-de-symboles-proportionnels",
    "href": "type_de_carte.html#carte-de-symboles-proportionnels",
    "title": "6  Les types de cartes",
    "section": "6.3 Carte de symboles proportionnels",
    "text": "6.3 Carte de symboles proportionnels\nLes cartes de symboles proportionnels sont utilisées pour représenter les variables de stocks (variables quantitatives absolues, la somme et la moyenne ont un sens). La fonction mf_map(..., type = \"prop\") propose cette représentation.\n\n# Communes\nmf_map(x = com)\n# Symboles proportionnels\nmf_map(\n  x = com, \n  var = \"POPULATION\",\n  type = \"prop\",\n  leg_title = \"Population totale\\n(2015)\"\n)\n# Titre\nmf_title(\"Distribution de la population dans le Lot\")\n\n\n\n\n\n6.3.1 Comparer plusieurs cartes\nIl est possible de fixer les dimensions du plus grand symbole correspondant à une certaine valeur avec les arguments inches et val_max. Nous pouvons ainsi construire des cartes en symboles proportionnels comparables.\n\n# Afficher deux cartes en vis-à-vis\npar(mfrow = c(1,2))\n# Communes\nmf_map(x = com, border = \"grey90\", lwd = .5)\n# Population active occupée dans l'industrie, les hommes\nmf_map(\n  x = com, \n  var = \"IND_H\", \n  type = \"prop\", \n  inches = .2, \n  val_max = 600, \n  leg_title = \"Hommes\", \n  leg_val_cex = .5,\n)\n# ajout d'un titre\nmf_title(\"Population active occupée dans l'industrie\")\n\n# Communes\nmf_map(x = com, border = \"grey90\", lwd = .5)\n# Population active occupée dans l'industrie, les femmes\nmf_map(\n  x = com, \n  var = \"IND_F\", \n  type = \"prop\",\n  inches = .2, \n  val_max = 600, \n  leg_title =\"Femmes\", \n  leg_val_cex = .5\n)\n\n# ajout d'un titre\nmf_title(\"Population active occupée dans l'industrie\")\n\n\n\n\nNous avons ici affiché deux cartes en vis-à-vis, voir le point Afficher plusieurs cartes sur la même figure pour plus de détails."
  },
  {
    "objectID": "type_de_carte.html#carte-choroplèthe",
    "href": "type_de_carte.html#carte-choroplèthe",
    "title": "6  Les types de cartes",
    "section": "6.4 Carte choroplèthe",
    "text": "6.4 Carte choroplèthe\nLes cartes choroplèthes sont utilisées pour représenter les variables de ratios (variables quantitatives relatives, la moyenne a un sens, la somme n’a pas de sens).\nPour ce genre de représentation il faut au préalable :\n\nchoisir une méthode de discrétisation pour transformer une série statistique continue en classes définies par des intervalles,\nchoisir un nombre de classes,\nchoisir une palette de couleurs.\n\nLa fonction mf_map(..., type = \"choro\") permet de créer des cartes choroplètes. Les arguments nbreaks et breaks servent à paramétrer les discrétisations, et la fonction mf_get_breaks() permet de travailler sur les discrétisations en dehors de la fonction mf_map(). De même, l’argument pal est utilisé pour renseigner une palette de couleur, mais plusieurs fonctions peuvent être utilisées pour paramétrer les palettes en dehors de la fonction (mf_get_pal…).\n\n# Densité de population (hab./km2) en utilisant la fonction sf::st_area()\ncom$DENS <- 1e6 * com$POP / as.numeric(st_area(com))\nmf_map(\n  x = com,\n  var = \"DENS\",\n  type = \"choro\",\n  breaks = \"quantile\",\n  pal = \"Dark Mint\",\n  lwd = 1,\n  leg_title = \"Densité de population\\n(habitants par km2)\", \n  leg_val_rnd = 0\n)\nmf_title(\"Distribution de la population dans le Lot (2018)\")\n\n\n\n\n\n6.4.1 Discrétisations\nLa fonction mf_get_breaks() met à disposition les méthodes de discrétisations de variables classique : quantiles, moyenne/écart-type, amplitudes égales, moyennes emboîtées, Fisher-Jenks, géométrique …\n\ncom$POP_ACT <- \n  com$AGR_H + com$AGR_F + \n  com$IND_H + com$IND_F + \n  com$BTP_H + com$BTP_F + \n  com$TER_H + com$TER_F\ncom$SHARE_ACT <- 100 * com$POP_ACT / com$POPULATION\n\nd1 <- mf_get_breaks(com$SHARE_ACT, nbreaks = 6, breaks = \"equal\", freq = T)\nd2 <- mf_get_breaks(com$SHARE_ACT, nbreaks = 6, breaks = \"quantile\")\nd3 <- mf_get_breaks(com$SHARE_ACT, nbreaks = 6, breaks = \"geom\")\nd4 <- mf_get_breaks(com$SHARE_ACT, breaks = \"msd\", central = FALSE)\n\n\n\n\n\n\n\n\n6.4.2 Palettes de couleurs\nL’argument pal de mf_map() est dédié au choix d’une palette de couleur. Les palettes fournies par la fonction hcl.colors() peuvent être utilisées directement.\n\nmf_map(x = com, var = \"SHARE_ACT\", type = \"choro\",\n       breaks = d4, pal = \"Blues 3\")\n\n\n\n\n\nLa fonction mf_get_pal() permet de construire une palette de couleur. Cette fonction est surtout utile pour créer des palettes divergentes asymétriques équilibrées.\n\nmypal <- mf_get_pal(n = c(6,3), palette = c(\"Burg\", \"Teal\"))\nimage(1:9, 1, as.matrix(1:9), col=mypal, xlab = \"\", ylab = \"\", xaxt = \"n\",\n      yaxt = \"n\",bty = \"n\")\n\n\n\n\n\n\n6.4.3 Pour une couche de points\nIl est possible d’utiliser ce mode de représentation en implémentation ponctuelle également.\n\ncom_c <- st_centroid(com)\n\n#> Warning in st_centroid.sf(com): st_centroid assumes attributes are constant over\n#> geometries of x\n\nmf_map(com)\nmf_map(\n  x = com_c,\n  var = \"DENS\",\n  type = \"choro\",\n  breaks = \"quantile\",\n  nbreaks = 4,\n  pal = \"Dark Mint\",\n  pch = 24,\n  cex = 2,\n  border = \"white\",\n  lwd = .7,\n  leg_pos = \"topleft\",\n  leg_title = \"Densité de population\\n(habitants par km2)\", \n  leg_val_rnd = 0, \n  add = TRUE\n)\nmf_title(\"Distribution de la population dans le Lot (2018)\")"
  },
  {
    "objectID": "type_de_carte.html#carte-de-typologie",
    "href": "type_de_carte.html#carte-de-typologie",
    "title": "6  Les types de cartes",
    "section": "6.5 Carte de typologie",
    "text": "6.5 Carte de typologie\nLes cartes de typologies sont utilisées pour représenter les variables qualitatives.\nLa fonction mf_map(..., type = \"typo\") propose cette représentation.\n\nmf_map(\n  x = com,\n  var=\"STATUT\",\n  type = \"typo\",\n  pal = c(\"aquamarine4\", \"yellow3\",\"wheat\"),\n  lwd = .7,\n  leg_title = \"\"\n)\nmf_title(\"Statut Administratif\")\n\n\n\n\n\n6.5.1 Ordonner les valeurs dans la légende\nL’argument val_order sert à ordonner les modalités dans la légende.\n\nmf_map(\n  x = com,\n  var=\"STATUT\",\n  type = \"typo\",\n  pal = c(\"aquamarine4\", \"yellow3\",\"wheat\"),\n  val_order = c(\"Préfecture\", \"Sous-préfecture\", \"Commune simple\"),\n  lwd = .7,\n  leg_title = \"\"\n)\nmf_title(\"Statut Administratif\")\n\n\n\n\n\n\n6.5.2 Les cartes de points\nQuand l’implantation de la couche est ponctuelle, des symboles sont utilisés pour porter les couleurs de la typologie.\n\n# extraction des centroides de la préfectures et des sous-préfectures\ncom_ctr <- st_centroid(com[com$STATUT != \"Commune simple\", ])\n\n#> Warning in st_centroid.sf(com[com$STATUT != \"Commune simple\", ]): st_centroid\n#> assumes attributes are constant over geometries of x\n\nmf_map(com)\nmf_map(\n  x = com_ctr, \n  var = \"STATUT\", \n  type = \"typo\", \n  cex = 3, \n  pch = 23, \n  pal = c(\"aquamarine4\", \"yellow3\"),\n  leg_title = \"\", \n  add = TRUE\n)\nmf_title(\"Statut Administratif\")\n\n\n\n\n\n\n6.5.3 Les cartes de lignes\n\n# Sélection des routes qui intersectent la commune de Cahors\ncahors <- com[com$NOM_COM == \"Cahors\", ]\nroute_cahors <- route[st_intersects(x = route, y = cahors, sparse = FALSE), ]\nmf_map(cahors)\nmf_map(\n  x = route_cahors,\n  var = \"VOCATION\",\n  type = \"typo\", \n  lwd = 2,\n  pal = mf_get_pal(n = 4, \"Dark 2\"),\n  leg_title = \"Type de route\",\n  add = TRUE\n)\nmf_title(\"Statut Administratif\")"
  },
  {
    "objectID": "type_de_carte.html#carte-de-stocks-et-de-ratios",
    "href": "type_de_carte.html#carte-de-stocks-et-de-ratios",
    "title": "6  Les types de cartes",
    "section": "6.6 Carte de stocks et de ratios",
    "text": "6.6 Carte de stocks et de ratios\nLa fonction mf_map(..., var = c(\"var1\", \"var2\"), type = \"prop_choro\") représente des symboles proportionnels dont les surfaces sont proportionnelles aux valeurs d’une variable et dont la couleur repose sur la discrétisation d’une seconde variable. La fonction utilise les arguments des fonctions mf_map(..., type = \"prop\") et mf_map(..., type = \"choro\").\n\nmf_map(x = com)\nmf_map(\n  x = com,\n  var = c(\"POPULATION\", \"DENS\"),\n  type = \"prop_choro\",\n  border = \"grey50\",\n  lwd = 1,\n  leg_pos = c(\"topright\", \"topleft\"),\n  leg_title = c(\"Population\", \"Densité\\nde population\\n(en hab./km2)\"),\n  breaks = \"q6\",\n  pal = \"Magenta\",\n  leg_val_rnd = c(0,1))\nmf_title(\"Population\")"
  },
  {
    "objectID": "type_de_carte.html#carte-de-stocks-et-de-catégories",
    "href": "type_de_carte.html#carte-de-stocks-et-de-catégories",
    "title": "6  Les types de cartes",
    "section": "6.7 Carte de stocks et de catégories",
    "text": "6.7 Carte de stocks et de catégories\nLa fonction mf_map(..., var = c(\"var1\", \"var2\"), type = \"prop_typo\") représente des symboles proportionnels dont les surfaces sont proportionnelles aux valeurs d’une variable et dont la couleur représente les modalités d’une variable qualitative. La fonction utilise les arguments des fonctions mf_map(..., type = \"prop\") et mf_map(..., type = \"typo\").\n\nmf_map(x = com)\nmf_map(\n  x = com,\n  var = c(\"POPULATION\", \"STATUT\"),\n  type = \"prop_typo\",\n  pal = c(\"aquamarine4\", \"yellow3\",\"wheat\"),\n  val_order = c(\"Préfecture\", \"Sous-préfecture\", \"Commune simple\"),\n  leg_pos = c(\"bottomleft\",\"topleft\"),\n  leg_title = c(\"Population\\n(2015)\",\n                \"Statut administratif\"),\n)\nmf_title(\"Population\")"
  },
  {
    "objectID": "03_cartographie.html",
    "href": "03_cartographie.html",
    "title": "7  Mise en page",
    "section": "",
    "text": "Pour être finalisée, une carte thématique doit contenir certains éléments additionnels tels que : le titre, l’auteur, la source, l’échelle, l’orientation…"
  },
  {
    "objectID": "03_cartographie.html#les-thèmes",
    "href": "03_cartographie.html#les-thèmes",
    "title": "7  Mise en page",
    "section": "7.1 Les thèmes",
    "text": "7.1 Les thèmes\nLa fonction mf_theme() défini un thème cartographique. L’utilisation d’un thème permet de définir plusieurs paramètres graphiques qui sont ensuite appliqués aux cartes créées avec mapsf. Ces paramètres sont : les marges de la carte, la couleur principale, la couleur de fond, la position et l’aspect du titre. Un thème peut également être défini avec les fonctions mf_init() et mf_export().\n\n7.1.1 Utiliser un thème prédéfini\nUne série de thèmes prédéfinis est disponible par défaut (voir ?mf_theme).\n\nlibrary(mapsf)\n# utilisation d'une couleur de fond pour la figure, pour voir l'utilisation des marges\nopar <- par(mfrow = c(2,2))\n# Utilisation d'un thème prédéfini\nmf_theme(\"default\")\nmf_map(com)\nmf_title(\"Theme : 'default'\")\nmf_theme(\"darkula\")\nmf_map(com)\nmf_title(\"Theme : 'darkula'\")\nmf_theme(\"candy\")\nmf_map(com)\nmf_title(\"Theme : 'candy'\")\nmf_theme(\"nevermind\")\nmf_map(com)\nmf_title(\"Theme : 'nevermind'\")\npar(opar)\n\n\n\n\n\n\n7.1.2 Modifier un thème existant\nIl est possible de modifier un thème existant. Dans cet exemple, nous utilisons le thème “default” et nous en modifions quelques paramètres.\n\nlibrary(mapsf)\nopar <- par(mfrow = c(1,2))\nmf_theme(\"default\")\nmf_map(com)\nmf_title(\"default\")\nmf_theme(\"default\", tab = FALSE, font = 4, bg = \"grey60\", pos = \"center\")\nmf_map(com)\nmf_title(\"modified default\")\npar(opar)\n\n\n\n\n\n\n7.1.3 Créer un thème\nIl est également possible de créer un thème.\n\nmf_theme(\n  bg = \"lightblue\",    # couleur de fond\n  fg = \"tomato1\",      # couleur principale\n  mar = c(0,0,1.5,0),  # marges\n  tab = FALSE,         # style \"onglet\" pour le titre\n  inner = FALSE,       # titre à l'intérieur de la zone de carte ou à l'extérieur\n  line = 1.5,          # espace dédié au titre\n  pos = \"center\",      # position du titre\n  cex = 1.2,           # taille du titre\n  font = 2             # type de fonte pour le titre\n)\nmf_map(com)\nmf_title(\"New theme\")"
  },
  {
    "objectID": "03_cartographie.html#les-titres",
    "href": "03_cartographie.html#les-titres",
    "title": "7  Mise en page",
    "section": "7.2 Les titres",
    "text": "7.2 Les titres\nLa fonction mf_title() permet d’ajouter un titre à une carte.\n\nmf_theme(\"default\")\nmf_map(com)\nmf_title(\"Titre de la carte\")\n\n\n\n\nIl est possible de personnaliser l’aspect du titre.\n\nmf_map(com)\nmf_title(\n  txt = \"Titre de la carte\", \n  pos = \"center\", \n  tab = FALSE, \n  bg = \"tomato3\", \n  fg = \"lightblue\", \n  cex = 1, \n  line = 1.2, \n  font = 1, \n  inner = FALSE\n)"
  },
  {
    "objectID": "03_cartographie.html#flèche-dorientation",
    "href": "03_cartographie.html#flèche-dorientation",
    "title": "7  Mise en page",
    "section": "7.3 Flèche d’orientation",
    "text": "7.3 Flèche d’orientation\nLa fonction mf_arrow() permet de choisir la position et l’aspect de la flèche d’orientation.\n\nmf_map(com)\nmf_arrow()"
  },
  {
    "objectID": "03_cartographie.html#échelle",
    "href": "03_cartographie.html#échelle",
    "title": "7  Mise en page",
    "section": "7.4 Échelle",
    "text": "7.4 Échelle\nLa fonction mf_scale() permet de choisir la position et l’aspect de l’échelle.\n\nmf_map(com)\nmf_scale(\n  size = 20,\n  lwd = 2,\n  cex = 1.2,\n)"
  },
  {
    "objectID": "03_cartographie.html#crédits",
    "href": "03_cartographie.html#crédits",
    "title": "7  Mise en page",
    "section": "7.5 Crédits",
    "text": "7.5 Crédits\nLa fonction mf_credits() permet d’afficher une ligne de crédits (sources, auteur…).\n\nmf_map(com)\nmf_credits(\"IGN\\nGiraud & Pécout, 2021\")"
  },
  {
    "objectID": "03_cartographie.html#habillage-complet",
    "href": "03_cartographie.html#habillage-complet",
    "title": "7  Mise en page",
    "section": "7.6 Habillage complet",
    "text": "7.6 Habillage complet\nLa fonction mf_layout() permet d’afficher tous ces éléments.\n\nmf_map(com)\nmf_layout(\n  title = \"Martinique\",\n  credits = \"IGN\\nGiraud & Pécout, 2021\",\n  arrow = TRUE\n)"
  },
  {
    "objectID": "03_cartographie.html#annotations",
    "href": "03_cartographie.html#annotations",
    "title": "7  Mise en page",
    "section": "7.7 Annotations",
    "text": "7.7 Annotations\n\nmf_map(com)\nmf_annotation(com[com$NOM_COM == \"Cahors\",], txt = \"Cahors\", halo = TRUE, cex = 1.5)"
  },
  {
    "objectID": "03_cartographie.html#les-légendes",
    "href": "03_cartographie.html#les-légendes",
    "title": "7  Mise en page",
    "section": "7.8 Les légendes",
    "text": "7.8 Les légendes\n\nmf_map(com)\nmf_legend(\n  type = \"prop\", \n  val = c(1000,500,200,10), \n  inches = .4, \n  title = \"Population\", \n  pos = \"topleft\"\n)\nmf_legend(\n  type = \"choro\", \n  val = c(0,10,20,30,40),\n  pal = \"Greens\", \n  pos = \"bottomright\", \n  val_rnd = 0\n)"
  },
  {
    "objectID": "03_cartographie.html#étiquettes",
    "href": "03_cartographie.html#étiquettes",
    "title": "7  Mise en page",
    "section": "7.9 Étiquettes",
    "text": "7.9 Étiquettes\nLa fonction mf_label() est dédiée à l’afichage d’étiquettes.\n\ncom_sel <- com[st_intersects(com, com[com$NOM_COM == \"Cahors\", ], sparse = F), ]\n\nmf_map(com_sel)\nmf_label(\n  x = com_sel,\n  var = \"NOM_COM\",\n  col= \"black\",\n  halo = TRUE,\n  overlap = FALSE, \n  lines = FALSE\n)\nmf_scale()\n\n\n\n\nL’argument halo = TRUE permet d’afficher un léger halo autour des étiquettes et l’argument overlap = FALSE permet de créer des étiquettes ne se recouvrant pas."
  },
  {
    "objectID": "03_cartographie.html#centrer-la-carte-sur-une-région",
    "href": "03_cartographie.html#centrer-la-carte-sur-une-région",
    "title": "7  Mise en page",
    "section": "7.10 Centrer la carte sur une région",
    "text": "7.10 Centrer la carte sur une région\nLa fonction mf_init() permet d’initialiser une carte en la centrant sur une objet spatial.\n\nmf_init(x = com_sel, theme = \"iceberg\")\nmf_map(com, add = TRUE)\nmf_map(com_sel, col = NA, border = \"red\", lwd = 2, add = TRUE)"
  },
  {
    "objectID": "03_cartographie.html#afficher-plusieurs-cartes-sur-la-même-figure",
    "href": "03_cartographie.html#afficher-plusieurs-cartes-sur-la-même-figure",
    "title": "7  Mise en page",
    "section": "7.11 Afficher plusieurs cartes sur la même figure",
    "text": "7.11 Afficher plusieurs cartes sur la même figure\nIl faut ici utiliser l’argument mfrow de la fonction par(). Le premier chiffre représente le nombre lignes et le deuxième le nombre de colonnes.\n\n# define the figure layout (1 row, 2 columns)\npar(mfrow = c(1, 2))\n# define theme\nmf_theme(\"default\", mar = c(0,0,1.2,0), tab = FALSE, pos = \"center\")\n# first map\nmf_map(com)\nmf_map(com, \"TER_F\", \"prop\", \n       val_max = 4000, \n       leg_pos = \"topleft\", \n       leg_title = \"N.\")\nmf_title(\"Tertiaire: Femmes\")\n# second map\nmf_map(com)\nmf_map(com, \"TER_H\", \"prop\", \n       val_max = 4000, \n       leg_pos = NA)\nmf_title(\"Hommes\")"
  },
  {
    "objectID": "03_cartographie.html#export-des-cartes",
    "href": "03_cartographie.html#export-des-cartes",
    "title": "7  Mise en page",
    "section": "7.12 Export des cartes",
    "text": "7.12 Export des cartes\nIl est assez difficile d’exporter des figures (cartes ou autres) dont le ratio hauteur/largeur est satisfaisant. Le ratio par défaut des figures au format png est de 1 (480x480 pixels) :\n\nmf_theme(\"candy\", bg = \"grey80\")\nc2c <- com[com$INSEE_COM == \"46138\", ]\npng(\"img/c2c1.png\")\nmf_map(c2c)\nmf_title(\"Cœur de Causse\")\ndev.off()\n\n\nSur cette carte beaucoup d’espace est perdu au nord et au sud de la commune.\nLa fonction mf_export() permet des exports de cartes dont le ratio hauteur/largeur est contrôlé et correspond à celui d’un objet spatial.\n\nmf_theme(\"candy\", bg = \"grey80\")\nmf_export(c2c, \"img/c2c2.png\", width = 480)\nmf_map(c2c)\nmf_title(\"Cœur de Causse\")\ndev.off()\n\n\nL’emprise de cette carte est exactement celle de la région affichée."
  },
  {
    "objectID": "03_cartographie.html#ajouter-une-image-sur-une-carte",
    "href": "03_cartographie.html#ajouter-une-image-sur-une-carte",
    "title": "7  Mise en page",
    "section": "7.13 Ajouter une image sur une carte",
    "text": "7.13 Ajouter une image sur une carte\nCela peut être utile pour ajouter un logo, un pictogramme. La fonction readPNG() du package png permet l’ajout d’images sur une figure.\n\nmf_theme(\"default\", mar = c(0,0,0,0))\nlibrary(png)\n# import de l'image\nlogo <- readPNG(\"img/Logo CG 46 - Bleu.png\")\n# dimension de l'image en unité de la carte\npp <- dim(logo)[2:1] * 20\n# Définition d'un point d'encrage de l'image dans la figure, ici\n# le coin supérieur gauche de la bounding box du département\nxy <- st_bbox(com)[c(1,4)]\nmf_map(com, col = \"#D1914D\", border = \"white\")\nrasterImage(\n  image   = logo,\n  xleft   = xy[1],\n  ybottom = xy[2] - pp[2],\n  xright  = xy[1] + pp[1],\n  ytop    = xy[2]\n)"
  },
  {
    "objectID": "03_cartographie.html#ajouter-un-ombrage-à-une-couche",
    "href": "03_cartographie.html#ajouter-un-ombrage-à-une-couche",
    "title": "7  Mise en page",
    "section": "7.14 Ajouter un ombrage à une couche",
    "text": "7.14 Ajouter un ombrage à une couche\nLa fonction mf_shadow() permet de créer une ombre à une couche de polygones.\n\nmf_shadow(com)\nmf_map(com, add=TRUE)"
  },
  {
    "objectID": "03_cartographie.html#création-de-cartons",
    "href": "03_cartographie.html#création-de-cartons",
    "title": "7  Mise en page",
    "section": "7.15 Création de cartons",
    "text": "7.15 Création de cartons\nLa fonction mf_inset_on() permet de démarrer la création d’un carton. Il faut ensuite “refermer” le carton avec mf_inset_off().\n\nmf_init(x = com_sel, theme = \"agolalight\", expandBB = c(0,.1,0,.5))\nmf_map(com, add = TRUE)\nmf_map(com_sel, col = \"tomato4\", border = \"tomato1\", lwd = 2, add = TRUE)\n# Carton France\nmf_inset_on(x = dep, pos = \"topright\", cex = .3)\nmf_map(dep, lwd = .5, border= \"grey90\")\nmf_map(com_sel, col = \"tomato4\", border = \"tomato1\", lwd = .5, add = TRUE)\nmf_scale(size = 200, pos = \"bottomleft\", cex = .6, lwd = .5)\nmf_inset_off()\n# Carton Lot\nmf_inset_on(x = com, pos = \"bottomright\", cex = .3)\nmf_map(com, lwd = .5, border= \"grey90\")\nmf_map(com_sel, col = \"tomato4\", border = \"tomato1\", lwd = .5, add = TRUE)\nmf_scale(size = 20, pos = \"bottomright\", cex = .6, lwd = .5)\nmf_inset_off()\n# Carton Monde\nmf_inset_on(x = \"worldmap\", pos = \"topleft\")\nmf_worldmap(com_sel, land_col = \"#cccccc\",border_col = NA, \n            water_col =  \"#e3e3e3\", col = \"tomato4\")\nmf_inset_off()\nmf_title(\"Cahors et ses environs\")\nmf_scale(1, pos = 'bottomleft')"
  },
  {
    "objectID": "03_cartographie.html#exercices",
    "href": "03_cartographie.html#exercices",
    "title": "7  Mise en page",
    "section": "7.16 Exercices",
    "text": "7.16 Exercices\n\nCréez une carte représentant la population active travaillant dans l’industrie.\nAjoutez les éléments d’habillage indispensables.\nUtilisez un thème personnalisé.\nAjoutez un carton de localisation du Lot\nExportez la carte au format PNG avec 800 pixels de large.\nComment rendre la carte plus intelligible ? Allez-y !\n\n\nlibrary(mapsf)\n# import des communes du Lot\ncom <- st_read(\"data/lot46.gpkg\", layer = \"commune\", quiet = TRUE)\n# import des départments français\ndep <- st_read(\"data/lot46.gpkg\", layer = \"departement\", quiet = TRUE)\n# Nombre total d'actifs\ncom$ACT <- com$AGR_H + com$AGR_F + com$IND_H + com$IND_F + com$BTP_H +\n  com$BTP_F + com$TER_H + com$TER_F\n# Nombre d'actifs dans l'industrie\ncom$IND <- com$IND_F + com$IND_H\n# Part des actifs travaillant dans l'industrie\ncom$PART_ACT_IND <- 100 * com$IND / com$ACT\n\n# Création d'un thème personnalisé\nth <- mf_theme(\"green\", mar = c(0,0,1.5,0), pos = \"left\")\n\n# Cartographie du nombre total de travailleurs de l'industrie\nmf_export(com, \"img/n_ind.png\", theme = th,\n          width = 800)\nmf_map(x = com, border = \"white\", lwd = .2, add = T)\nmf_map(x = dep, lwd = 1, col = NA, add = TRUE, lend = 0)\nmf_map(x = com, var = \"IND\", type = \"prop\",\n       leg_title = \"Nombre d'actifs\\ntravaillant dans\\nl'industrie\")\nmf_title(\"Répartition des actifs travaillant dans l'industrie - 2017\")\nmf_scale(5)\nmf_arrow(pos = \"topright\")\n# notez l'utilisation ici de paste0() qui permet de concatener des chaines\n# de caractères et de \\n qui permet d'aller à la ligne\nmf_credits(paste0(\"Admin Express COG Carto 3.0, IGN - 2021 & \",\n                  \"BD CARTO® 4.0, IGN - 2021 ; Recensements harmonisés - \",\n                  \"Séries départementales et communales, INSEE - 2020\\n\",\n                  \"Auteurs : T. Giraud & H. Pecout, 2022\"))\ndev.off()\n\n#> png \n#>   2\n\n\n\n\n# Cartographie de la part des actifs travaillant dans l'industrie\n## Quelle est la forme de la distribution que nous voulons cartographier ?\nhist(com$PART_ACT_IND)\n\n\n\nboxplot(com$PART_ACT_IND, horizontal = TRUE)\n\n\n\nsummary(com$PART_ACT_IND)\n\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>   0.000   7.407  14.286  16.282  23.077 100.000\n\n#### > Seules 2 communes ont 100% de travailleurs dans l'industrie\n#### Ces communes ont moins de 15 actifs\n# Sélection des communes ayant plus de 15 actifs\ncom_sel <- com[com$ACT > 15, ]\n## Quelle est la forme de cette (nouvelle) distribution\nhist(com_sel$PART_ACT_IND)\n\n\n\nboxplot(com_sel$PART_ACT_IND, horizontal = TRUE)\n\n\n\nsummary(com_sel$PART_ACT_IND)\n\n#>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n#>   0.000   7.408  14.286  15.783  22.466  60.000\n\n# Creation d'un vecteur contenant les limites de classes en\n# utilisant la méthode des quantiles\nbks <- mf_get_breaks(com_sel$PART_ACT_IND, nbreaks = 5,\n                     breaks = \"quantile\")\nhist(com_sel$PART_ACT_IND, bks)\n\n\n\nmf_export(com, \"img/s_ind.png\", theme = th,\n          width = 800)\n# Cartographie\nmf_map(x = com,\n       var = \"PART_ACT_IND\",\n       type = \"choro\",\n       breaks = bks,         # Utilisation des bornes de classes créées précédement\n       leg_val_rnd = 0,      # arrondir les valeurs dans la légende\n       pal = \"Red-Yellow\",   # Utilisation d'une palette de couleur\n       leg_title = \"Part des actifs\\ntravaillant dans\\nl'industrie\",\n       add = TRUE,\n       col_na = \"grey\",\n       leg_no_data = \"Communes de moins de 15 actifs\") # texte du no data dans la légende\nmf_title(\"Répartition des actifs travaillant dans l'industrie - 2017\")\nmf_scale(5)\nmf_arrow(pos = \"topright\")\nmf_credits(paste0(\"Admin Express COG Carto 3.0, IGN - 2021 & \",\n                  \"BD CARTO® 4.0, IGN - 2021 ; Recensements harmonisés - \",\n                  \"Séries départementales et communales, INSEE - 2020\\n\",\n                  \"Auteurs : T. Giraud & H. Pecout, 2022\"))\ndev.off()\n\n#> png \n#>   2\n\n\n\nNous allons maintenant combiner le nombre total d’actifs et la parts des travailleurs de l’industrie.\n\nmf_export(com, \"img/c_ind.png\", theme = th,\n          width = 800)\nmf_map(x = com, border = \"white\", lwd = .2, add = T)\nmf_map(x = dep, lwd = 1, col = NA, add = TRUE, lend = 0)\nmf_map(com, c(\"ACT\", \"PART_ACT_IND\"), \"prop_choro\",\n       breaks = bks,\n       pal = \"Red-Yellow\",\n       inches = .4,\n       border = \"white\", lwd = .7,\n       leg_val_rnd =  c(0,1),\n       leg_pos = c(538000,6442000, 538000, 6424000),  # ici les légendes sont positionnées manuellement\n       leg_title = c(\"Nombre d'actifs*\",\n                     \"Part des actifs\\ndans l'industrie (en %)\"),\n       col_na = \"grey\",\n       leg_no_data = \"Communes de moins de 15 actifs\")\n\n# Ajout d'annotations\nmf_annotation(x = com[com$NOM_COM==\"Biars-sur-Cère\",],\n              txt = \"Andros\",\n              col_arrow = th$fg, halo = T, cex = 1)\nmf_annotation(x = com[com$NOM_COM==\"Figeac\",],\n              txt = \"Industrie\\naéronautique\",\n              col_arrow = th$fg, pos = \"bottomright\", halo = T, cex = 1)\nmf_annotation(x = com[com$NOM_COM==\"Gramat\",],\n              txt = \"La Quercynoise (?)\",\n              col_arrow = th$fg, pos = \"topleft\", s = 1, halo = T,\n              cex = 1)\n\nmf_title(\"Répartition des actifs travaillant dans l'industrie - 2017\")\n\n# ajout d'un carton ->\nmf_inset_on(fig = c(.8,0.98,0.1,0.3))\nmf_map(dep, lwd = .1)\nmf_map(com, border = NA, add = T, col = th$fg)\nbox(col = th$fg, lwd = .5)\nmf_inset_off()\n# <- fin du carton\nmf_scale(5)\nmf_arrow(\"topright\")\nmf_credits(paste0(\"Admin Express COG Carto 3.0, IGN - 2021 & \",\n                  \"BD CARTO® 4.0, IGN - 2021 ; Recensements harmonisés - \",\n                  \"Séries départementales et communales, INSEE - 2020\\n\",\n                  \"Auteurs : T. Giraud & H. Pecout, 2022\"))\ndev.off()\n\n#> png \n#>   2"
  },
  {
    "objectID": "05_references.html",
    "href": "05_references.html",
    "title": "References",
    "section": "",
    "text": "Almquist, Z. W. (2012a). UScensus2000cdp: US Census 2000 Designated\nPlaces Shapefiles and Additional Demographic Data. http://disasternets.calit2.uci.edu/census2000/\n\n\nAlmquist, Z. W. (2012b). UScensus2000tract: US Census 2000 Tract\nLevel Shapefiles and Additional Demographic Data. http://disasternets.calit2.uci.edu/census2000/\n\n\nAlmquist, Z. W. (2021). UScensus2010: US Census 2010 Suite of R\nPackages. https://github.com/zalmquist/UScensus2010\n\n\nAntunez, K. (s. d.). package R COGugaison. https://antuki.github.io/COGugaison/\n\n\nAntunez, K. (2022). CARTElette: Création de couches cartographiques\nà partir du code officiel géographique (COG) et des couches IGN. http://github.com/antuki/CARTElette/CARTElette\n\n\nArel-Bundock, V. (2021). WDI: World Development Indicators and Other\nWorld Bank Data. https://vincentarelbundock.github.io/WDI/\n\n\nAybar, C. (2021). rgee: R Bindings for Calling the Earth Engine\nAPI. https://CRAN.R-project.org/package=rgee\n\n\nBertin, J. (1967). Sémiologie Graphique: Les Diagrammes,\nLes Réseaux, Les Cartes, Les Réimpressions Des\nÉditions De l’Ecole Des Hautes Études en\nSciences Sociales. Paris: Mouton & Gauthier-Villars.\n\n\nBivand, R. S. (2020). Progress in the R ecosystem for representing and\nhandling spatial data. Journal of Geographical Systems, 1‑32.\n\n\nBivand, R., Keitt, T. et Rowlingson, B. (2018). rgdal: Bindings for\nthe ’Geospatial’ Data Abstraction Library. https://CRAN.R-project.org/package=rgdal\n\n\nBivand, R. et Rundel, C. (2018). rgeos: Interface to Geometry Engine\n- Open Source (’GEOS’). https://CRAN.R-project.org/package=rgeos\n\n\nBocinsky, R. K. (2019). FedData: Functions to Automate Downloading\nGeospatial Data Available from Several Federated Data Sources. https://github.com/ropensci/FedData\n\n\nBusetto, L. et Ranghetti, L. (2016). MODIStsp: an R package for\npreprocessing of MODIS Land Products time series. Computers &\nGeosciences, 97, 40‑48. https://doi.org/10.1016/j.cageo.2016.08.020\n\n\nDetomasi, R. (2021). geouy: Geographic Information of Uruguay.\nhttps://CRAN.R-project.org/package=geouy\n\n\nDicko, A. (2021). R client for the geoBoundaries API, providing\ncountry political administrative boundaries. https://dickoa.gitlab.io/rgeoboundaries/index.html\n\n\nDunnington, D. (2021). ggspatial: Spatial Data\nFramework for ggplot2. https://CRAN.R-project.org/package=ggspatial\n\n\nDyba, K. et Nowosad, J. (2021). rgugik: Search and Retrieve Spatial Data\nfrom the Polish Head Office of Geodesy and Cartography in R. Journal\nof Open Source Software, 6(59), 2948. https://doi.org/10.21105/joss.02948\n\n\nFAURE, M.-E. (2022). inseeLocalData: Accès aux données locales de\nl’Insee via le catalogue des API.\n\n\nGDAL/OGR contributors. (2022). GDAL/OGR Geospatial Data\nAbstraction software Library. Open Source Geospatial Foundation. https://doi.org/10.5281/zenodo.5884351\n\n\nGilardi, A. et Lovelace, R. (2021). osmextract: Download and Import\nOpen Street Map Data Extracts. https://CRAN.R-project.org/package=osmextract\n\n\nGiraud, T. (2021a). mapsf: Thematic Cartography.\n\n\nGiraud, T. (2021b). maptiles: Download and Display Map Tiles.\nhttps://github.com/riatelab/maptiles/\n\n\nGiraud, T. et Lambert, N. (2018). cartography: Thematic\nCartography. https://github.com/riatelab/cartography/\n\n\nGlenn, E. H. (2019). acs: Download, Manipulate, and Present American\nCommunity Survey and Decennial Data from the US Census. https://CRAN.R-project.org/package=acs\n\n\nGreg Freedman Ellis et Derek Burk. (2020). ipumsr: Read IPUMS\nExtract Files. https://CRAN.R-project.org/package=ipumsr\n\n\nGuevarra, E. (2021). gadmr: An R Interface to the GADM Map\nRepository. https://github.com/SpatialWorks/gadmr\n\n\nHaukka, J. (2020). mapsFinland: Maps of Finland. https://CRAN.R-project.org/package=mapsFinland\n\n\nHernangómez, D. (2021a). giscoR: Download Map Data from GISCO API -\nEurostat. https://CRAN.R-project.org/package=giscoR\n\n\nHernangómez, D. (2021b). mapSpain: Administrative Boundaries of\nSpain. https://CRAN.R-project.org/package=mapSpain\n\n\nHijmans, R. J. (2021a). raster: Geographic Data Analysis and\nModeling. https://CRAN.R-project.org/package=raster\n\n\nHijmans, R. J. (2021b). terra: Spatial Data Analysis. https://CRAN.R-project.org/package=terra\n\n\nHijmans, R. J., Ghosh, A. et Mandel, A. (2021). geodata: Download\nGeographic Data. https://CRAN.R-project.org/package=geodata\n\n\nHollister, J. (2021). elevatr: Access Elevation Data from Various\nAPIs. https://github.com/jhollist/elevatr/\n\n\nKaplan, J. (2016). censusGeography: Changes United States Census\nGeographic Code into Name of Location. https://CRAN.R-project.org/package=censusGeography\n\n\nLahti, L., Huovari, J., Kainu, M. et Biecek, P. (2017). eurostat R\npackage. R Journal. https://journal.r-project.org/archive/2017/RJ-2017-019/index.html\n\n\nLambert, N. et Zanin, C. (2016). Manuel de cartographie: principes,\nméthodes, applications. Armand Colin.\n\n\nLeasure, D. R., Bondarenko, M., Darin, E. et Tatem, A. J. (2021).\nwopr: An R Package to access the WorldPop Open Population Repository\n(WOPR).\n\n\nLeclerc, H. (2021). insee: Tools to Easily Download Data from INSEE\nBDM Database. https://pyr-opendatafr.github.io/R-Insee-Data/\n\n\nLi, G. (2021). totalcensus: Extract Decennial Census and American\nCommunity Survey Data. https://github.com/GL-Li/totalcensus\n\n\nLovelace, R., Nowosad, J. et Muenchow, J. (2019). Geocomputation\nwith R. CRC Press. https://geocompr.robinlovelace.net/\n\n\nMike Page, M. T. (British. R. C. S. (2021). R package for mapping UK\ngeographies. https://github.com/britishredcrosssociety/geographr\n\n\nPadgham, M., Rudis, B., Lovelace, R. et Salmon, M. (2017). osmdata.\nThe Journal of Open Source Software, 2(14). https://doi.org/10.21105/joss.00305\n\n\nPearson, J. (2021). SeerMapper: A Quick Way to Map U.S. Rates and\nData of U.S. States, Counties, Census Tracts, or Seer Registries using\n2000 and 2010 U.S. Census Boundaries. https://CRAN.R-project.org/package=SeerMapper\n\n\nPebesma, E. (2018a). sf: Simple Features for R. https://CRAN.R-project.org/package=sf\n\n\nPebesma, E. (2018b). Simple Features for R: Standardized Support\nfor Spatial Vector Data. The R Journal. https://journal.r-project.org/archive/2018/RJ-2018-009/index.html\n\n\nPebesma, E. (2021). stars: Spatiotemporal Arrays, Raster and Vector\nData Cubes. https://CRAN.R-project.org/package=stars\n\n\nPebesma, E. et Bivand, R. (2018). sp: Classes and Methods for\nSpatial Data. https://CRAN.R-project.org/package=sp\n\n\nPereira, R. H. M. et Goncalves, C. N. (2021). geobr: Download\nOfficial Spatial Data Sets of Brazil. https://github.com/ipeaGIT/geobr\n\n\nPiburn, J. (2020). wbstats: Programmatic Access to the World Bank\nAPI. Oak Ridge National Laboratory. https://doi.org/10.11578/dc.20171025.1827\n\n\nPROJ contributors. (2021). PROJ coordinate\ntransformation software library. Open Source Geospatial Foundation.\nhttps://proj.org/\n\n\nPumain, D. et Béguin, M. (2010). La représentation des\ndonnées géographiques: Statistique et\ncartographie. Armand Colin.\n\n\nRanghetti, L. et Busetto, L. (2021). sen2r: Find, Download and\nProcess Sentinel-2 Data. https://sen2r.ranghetti.info\n\n\nRead, J. S., Walker, J. I., Appling, A., Blodgett, D. L., Read, E. K. et\nWinslow, L. A. (2015). geoknife: Reproducible web-processing of large\ngridded datasets. Ecography. https://doi.org/10.1111/ecog.01880\n\n\nRecht, H. (2020). censusapi: Retrieve Data from the Census\nAPIs. https://github.com/hrecht/censusapi\n\n\nRowlingson, B. (2019). geonames: Interface to the \"Geonames\" Spatial\nQuery Web Service. https://CRAN.R-project.org/package=geonames\n\n\nSouth, A. (2017). rnaturalearth: World Map Data from Natural\nEarth. https://github.com/ropenscilabs/rnaturalearth\n\n\nSparks, A. H. (2018). nasapower: A NASA POWER Global Meteorology,\nSurface Solar Energy and Climatology Data Client for R. The Journal\nof Open Source Software, 3(30), 1035. https://doi.org/10.21105/joss.01035\n\n\nTennekes, M. (2018). tmap: Thematic Maps in R.\nJournal of Statistical Software, 84(6), 1‑39. https://doi.org/10.18637/jss.v084.i06\n\n\nVargas, M. (2020). chilemapas: Mapas de las Divisiones Politicas y\nAdministrativas de Chile (Maps of the Political and Administrative\nDivisions of Chile). https://pachamaltese.github.io/chilemapas/\n\n\nWalker, K. (2021a). idbr: R Interface to the US Census Bureau\nInternational Data Base API. https://CRAN.R-project.org/package=idbr\n\n\nWalker, K. (2021b). tigris: Load Census TIGER/Line Shapefiles.\nhttps://github.com/walkerke/tigris\n\n\nWalker, K. et Herman, M. (2021). tidycensus: Load US Census Boundary\nand Attribute Data as tidyverse and sf-Ready Data Frames. https://walker-data.com/tidycensus/\n\n\nWatson, O. J., FitzJohn, R. et Eaton, J. W. (2019). rdhs: an R package\nto interact with The Demographic and Health Surveys (DHS) Program\ndatasets. Wellcome Open Research, 4, 103. https://doi.org/10.12688/wellcomeopenres.15311.1\n\n\nWeidmann, N. B., Schvitz, G. et Girardin, L. (2021). cshapes: The\nCShapes 2.0 Dataset and Utilities. https://CRAN.R-project.org/package=cshapes\n\n\nWickham, H. (2016). ggplot2: Elegant Graphics for Data\nAnalysis. Springer-Verlag New York. https://ggplot2.tidyverse.org"
  },
  {
    "objectID": "04_acquisition_donnees.html",
    "href": "04_acquisition_donnees.html",
    "title": "Appendix A — Acquisition de données spatiales",
    "section": "",
    "text": "Depuis l’apparition du package sf, qui a très largement contribué à la popularisation de la manipulation de données spatiales avec R, de nombreux packages de mise à disposition de données géographiques (géométries et/ou attributs) ont été développés. Il s’agit le plus souvent de packages d’API qui permettent d’interroger des données mises à disposition sur le Web, directement avec R. Ce chapitre en présente une liste non-exhaustive."
  },
  {
    "objectID": "04_acquisition_donnees.html#à-léchelle-mondiale",
    "href": "04_acquisition_donnees.html#à-léchelle-mondiale",
    "title": "Appendix A — Acquisition de données spatiales",
    "section": "A.1 À l’échelle mondiale",
    "text": "A.1 À l’échelle mondiale\n\n rnaturalearth (South, 2017) : permet de récupérer les données cartographiques Natural Earth.\n\n gadmr (Guevarra, 2021) : permet de récupérer les données du GADM (découpages administratifs nationaux et infra-nationaux de l’ensemble des pays du monde).\n\n rgeoboundaries (Dicko, 2021) : client R pour l’API geoBoundaries, fournissant les frontières administratives politiques des pays.\n cshapes (Weidmann et al., 2021) : met à disposition les frontières nationales, de 1886 à aujourd’hui.\n\n osmextract (Gilardi et Lovelace, 2021) : permet d’importer des données OpenStreetMap.\n\n osmdata (Padgham et al., 2017) : pour télécharger et utiliser les données d’OpenStreetMap.\n maptiles (Giraud, 2021) : Ce package télécharge, compose et affiche des tuiles à partir d’un grand nombre de fournisseurs (OpenStreetMap, Stamen, Esri, CARTO ou Thunderforest…).\n\n geonames (Rowlingson, 2019) : permet d’interroger la BD geonames, qui fournit notamment des localisations.\n wbstats (Piburn, 2020) et WDI (Arel-Bundock, 2021) : donnent accès aux données et statistiques de la Banque mondiale.\n\n sen2r (Ranghetti et Busetto, 2021) : permet de télécharger et prétraiter automatiquement les données du satellite Sentinel-2.\n\n MODIStsp (Busetto et Ranghetti, 2016) : permet de trouver, télécharger et traiter des images MODIS.\n geodata (Hijmans et al., 2021) : founit un accès à des données sur le climat, l’altitude, le sol, la présence d’espèces et les limites administratives.\n elevatr (Hollister, 2021) : donne accès à des données d’élévation mises à disposition par Amazon Web Services Terrain Tiles, l’Open Topography Global Datasets API et l’USGS Elevation Point Query Service.\n rgee (Aybar, 2021) : permet d’utiliser l’API de Google Earth Engine, catalogue de données publiques et infrastructure de calcul pour les images satellites.\n\n nasapower (Sparks, 2018) : API client NASA (prévision des ressources énergétiques mondiales, météorologie, énergie solaire de surface et climatologie).\n geoknife (Read et al., 2015) : permet de traiter (en ligne) des données matricielles volumineuses issuent du Geo Data Portal de l’U.S. Geological Survey.\n wopr (Leasure et al., 2021) : fournit un accès API à la base de données WorldPop Open Population Repository.\n  rdhs (Watson et al., 2019) : API client et gestions de données de l’enquête démographique et de santé (DHS)."
  },
  {
    "objectID": "04_acquisition_donnees.html#à-léchelle-européenne",
    "href": "04_acquisition_donnees.html#à-léchelle-européenne",
    "title": "Appendix A — Acquisition de données spatiales",
    "section": "A.2 À l’échelle européenne",
    "text": "A.2 À l’échelle européenne\n\n giscoR (Hernangómez, 2021a) : permet de télécharger des données cartographiques mondiales et européennes de la BD GISCO d’Eurostat (système d’information géographique de la Commission).\n eurostat (Lahti et al., 2017) : permet de télécharger des données de la BD Eurostat."
  },
  {
    "objectID": "04_acquisition_donnees.html#à-léchelle-national",
    "href": "04_acquisition_donnees.html#à-léchelle-national",
    "title": "Appendix A — Acquisition de données spatiales",
    "section": "A.3 À l’échelle national",
    "text": "A.3 À l’échelle national\n\nBrésil\n\n geobr (Pereira et Goncalves, 2021) : fournit un accès facile aux séries de données spatiales officielles du Brésil pour différentes années et découpage administratifs.\n\nChili\n\n chilemapas (Vargas, 2020) : donne accès aux divisions politiques et administratives du Chili.\n\nEspagne\n\n mapSpain (Hernangómez, 2021b) : propose les limites administratives de l’Espagne à plusieurs niveaux (Communautés autonomes, Provinces, Municipalités), ainsi que des tuiles.\n\nÉtats-Unis\n\n  tidycensus (Walker et Herman, 2021) : permet de charger des données et géométries du recensement américain en format sf` et `tidyverse\n tigris (Walker, 2021b) : donne accès aux éléments cartographiques fournis par le US Census Bureau TIGER, y compris les limites cartographiques, les routes et l’eau.\n  FedData (Bocinsky, 2019) : automatise le téléchargement de données géospatiales disponibles à partir de plusieurs sources de données fédérées.\n acs (Glenn, 2019) : permet de télécharger et manipuler les données de l’American Community Survey et les données décennales du recensement des États-Unis.\n censusapi (Recht, 2020) : wrapper pour les API du Census Bureau des États-Unis.\n censusGeography (Kaplan, 2016) : Permet de convertir les codes géographiques du recensement des États-Unis en nom de lieu.\n idbr (Walker, 2021a) : interface avec l’API de la base de données internationale du US Census Bureau.\n\n ipumsr (Greg Freedman Ellis et Derek Burk, 2020) : Permet d’importer des données de recensement, d’enquête et géographiques fournies par l’IPUMS.\n  SeerMapper & co (Pearson, 2021) : permettent de cartographier des données par États, comtés, secteurs de recensement ou des registres Seer (découpage du recensement 2000 et 2010).\n totalcensus (Li, 2021) : permet d’extraire les données du recensement décennal et de l’American Community Survey au niveaux des block, block group et tract.\n  UScensus2010 (Almquist, 2021), UScensus2000cdp (Almquist, 2012a) et UScensus2000tract (Almquist, 2012b) : fournissent les géométries du recensement des États-Unis en 2000/2010, ainsi que des données démographiques supplémentaires.\n\nFinland\n\n mapsFinland (Haukka, 2020) : donne un accès à des cartes et données concernant la Finland.\n\nFrance\n\n inseeLocalData (FAURE, 2022) : client R pour l’API Données Locales de l’Insee.\n insee (Leclerc, 2021) : pour télécharger facilement les données de la base BDM (Banque de Données Macroéconomiques) de l’INSEE.\n COGugaison (Antunez, s. d.) et CARTElette (Antunez, 2022) : Manipulation, agrégation de données communales françaises et création de couches cartographiques à partir du code officiel géographique (COG) et des couches IGN.\n\nPologne\n\n rgugik (Dyba et Nowosad, 2021) : permet l’acquisition automatique de données ouvertes à partir des ressources du Bureau central polonais de la géodésie et de la cartographie (Główny Urząd Geodezji i Kartografii ).\n\n\nRoyaume-Uni\n\n geographr (Mike Page, 2021) : pour manipuler et cartographier les limites géographiques et administratives du Royaume-Uni.\n\nUruguay\n\n geouy (Detomasi, 2021) : permet le chargement d’informations géographiques sur l’Uruguay.\n\n…\n\n\n\n\n\nAlmquist, Z. W. (2012a). UScensus2000cdp: US Census 2000 Designated Places Shapefiles and Additional Demographic Data. http://disasternets.calit2.uci.edu/census2000/\n\n\nAlmquist, Z. W. (2012b). UScensus2000tract: US Census 2000 Tract Level Shapefiles and Additional Demographic Data. http://disasternets.calit2.uci.edu/census2000/\n\n\nAlmquist, Z. W. (2021). UScensus2010: US Census 2010 Suite of R Packages. https://github.com/zalmquist/UScensus2010\n\n\nAntunez, K. (s. d.). package R COGugaison. https://antuki.github.io/COGugaison/\n\n\nAntunez, K. (2022). CARTElette: Création de couches cartographiques à partir du code officiel géographique (COG) et des couches IGN. http://github.com/antuki/CARTElette/CARTElette\n\n\nArel-Bundock, V. (2021). WDI: World Development Indicators and Other World Bank Data. https://vincentarelbundock.github.io/WDI/\n\n\nAybar, C. (2021). rgee: R Bindings for Calling the Earth Engine API. https://CRAN.R-project.org/package=rgee\n\n\nBocinsky, R. K. (2019). FedData: Functions to Automate Downloading Geospatial Data Available from Several Federated Data Sources. https://github.com/ropensci/FedData\n\n\nBusetto, L. et Ranghetti, L. (2016). MODIStsp: an R package for preprocessing of MODIS Land Products time series. Computers & Geosciences, 97, 40‑48. https://doi.org/10.1016/j.cageo.2016.08.020\n\n\nDetomasi, R. (2021). geouy: Geographic Information of Uruguay. https://CRAN.R-project.org/package=geouy\n\n\nDicko, A. (2021). R client for the geoBoundaries API, providing country political administrative boundaries. https://dickoa.gitlab.io/rgeoboundaries/index.html\n\n\nDyba, K. et Nowosad, J. (2021). rgugik: Search and Retrieve Spatial Data from the Polish Head Office of Geodesy and Cartography in R. Journal of Open Source Software, 6(59), 2948. https://doi.org/10.21105/joss.02948\n\n\nFAURE, M.-E. (2022). inseeLocalData: Accès aux données locales de l’Insee via le catalogue des API.\n\n\nGilardi, A. et Lovelace, R. (2021). osmextract: Download and Import Open Street Map Data Extracts. https://CRAN.R-project.org/package=osmextract\n\n\nGiraud, T. (2021). maptiles: Download and Display Map Tiles. https://github.com/riatelab/maptiles/\n\n\nGlenn, E. H. (2019). acs: Download, Manipulate, and Present American Community Survey and Decennial Data from the US Census. https://CRAN.R-project.org/package=acs\n\n\nGreg Freedman Ellis et Derek Burk. (2020). ipumsr: Read IPUMS Extract Files. https://CRAN.R-project.org/package=ipumsr\n\n\nGuevarra, E. (2021). gadmr: An R Interface to the GADM Map Repository. https://github.com/SpatialWorks/gadmr\n\n\nHaukka, J. (2020). mapsFinland: Maps of Finland. https://CRAN.R-project.org/package=mapsFinland\n\n\nHernangómez, D. (2021a). giscoR: Download Map Data from GISCO API - Eurostat. https://CRAN.R-project.org/package=giscoR\n\n\nHernangómez, D. (2021b). mapSpain: Administrative Boundaries of Spain. https://CRAN.R-project.org/package=mapSpain\n\n\nHijmans, R. J., Ghosh, A. et Mandel, A. (2021). geodata: Download Geographic Data. https://CRAN.R-project.org/package=geodata\n\n\nHollister, J. (2021). elevatr: Access Elevation Data from Various APIs. https://github.com/jhollist/elevatr/\n\n\nKaplan, J. (2016). censusGeography: Changes United States Census Geographic Code into Name of Location. https://CRAN.R-project.org/package=censusGeography\n\n\nLahti, L., Huovari, J., Kainu, M. et Biecek, P. (2017). eurostat R package. R Journal. https://journal.r-project.org/archive/2017/RJ-2017-019/index.html\n\n\nLeasure, D. R., Bondarenko, M., Darin, E. et Tatem, A. J. (2021). wopr: An R Package to access the WorldPop Open Population Repository (WOPR).\n\n\nLeclerc, H. (2021). insee: Tools to Easily Download Data from INSEE BDM Database. https://pyr-opendatafr.github.io/R-Insee-Data/\n\n\nLi, G. (2021). totalcensus: Extract Decennial Census and American Community Survey Data. https://github.com/GL-Li/totalcensus\n\n\nMike Page, M. T. (British. R. C. S. (2021). R package for mapping UK geographies. https://github.com/britishredcrosssociety/geographr\n\n\nPadgham, M., Rudis, B., Lovelace, R. et Salmon, M. (2017). osmdata. The Journal of Open Source Software, 2(14). https://doi.org/10.21105/joss.00305\n\n\nPearson, J. (2021). SeerMapper: A Quick Way to Map U.S. Rates and Data of U.S. States, Counties, Census Tracts, or Seer Registries using 2000 and 2010 U.S. Census Boundaries. https://CRAN.R-project.org/package=SeerMapper\n\n\nPereira, R. H. M. et Goncalves, C. N. (2021). geobr: Download Official Spatial Data Sets of Brazil. https://github.com/ipeaGIT/geobr\n\n\nPiburn, J. (2020). wbstats: Programmatic Access to the World Bank API. Oak Ridge National Laboratory. https://doi.org/10.11578/dc.20171025.1827\n\n\nRanghetti, L. et Busetto, L. (2021). sen2r: Find, Download and Process Sentinel-2 Data. https://sen2r.ranghetti.info\n\n\nRead, J. S., Walker, J. I., Appling, A., Blodgett, D. L., Read, E. K. et Winslow, L. A. (2015). geoknife: Reproducible web-processing of large gridded datasets. Ecography. https://doi.org/10.1111/ecog.01880\n\n\nRecht, H. (2020). censusapi: Retrieve Data from the Census APIs. https://github.com/hrecht/censusapi\n\n\nRowlingson, B. (2019). geonames: Interface to the \"Geonames\" Spatial Query Web Service. https://CRAN.R-project.org/package=geonames\n\n\nSouth, A. (2017). rnaturalearth: World Map Data from Natural Earth. https://github.com/ropenscilabs/rnaturalearth\n\n\nSparks, A. H. (2018). nasapower: A NASA POWER Global Meteorology, Surface Solar Energy and Climatology Data Client for R. The Journal of Open Source Software, 3(30), 1035. https://doi.org/10.21105/joss.01035\n\n\nVargas, M. (2020). chilemapas: Mapas de las Divisiones Politicas y Administrativas de Chile (Maps of the Political and Administrative Divisions of Chile). https://pachamaltese.github.io/chilemapas/\n\n\nWalker, K. (2021a). idbr: R Interface to the US Census Bureau International Data Base API. https://CRAN.R-project.org/package=idbr\n\n\nWalker, K. (2021b). tigris: Load Census TIGER/Line Shapefiles. https://github.com/walkerke/tigris\n\n\nWalker, K. et Herman, M. (2021). tidycensus: Load US Census Boundary and Attribute Data as tidyverse and sf-Ready Data Frames. https://walker-data.com/tidycensus/\n\n\nWatson, O. J., FitzJohn, R. et Eaton, J. W. (2019). rdhs: an R package to interact with The Demographic and Health Surveys (DHS) Program datasets. Wellcome Open Research, 4, 103. https://doi.org/10.12688/wellcomeopenres.15311.1\n\n\nWeidmann, N. B., Schvitz, G. et Girardin, L. (2021). cshapes: The CShapes 2.0 Dataset and Utilities. https://CRAN.R-project.org/package=cshapes"
  }
]